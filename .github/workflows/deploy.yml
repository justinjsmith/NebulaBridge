name: Deploy to AWS

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'
          cache-dependency-path: backend/requirements.txt

      - name: Check for AWS credentials
        run: |
          if [ -z "${{ secrets.AWS_ACCESS_KEY_ID }}" ] || [ -z "${{ secrets.AWS_SECRET_ACCESS_KEY }}" ]; then
            echo "::error::AWS credentials are missing. Please add AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY to your repository secrets."
            echo "To add secrets:"
            echo "1. Go to your repository settings"
            echo "2. Navigate to Secrets and variables > Actions"
            echo "3. Click 'New repository secret'"
            echo "4. Add AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY with your AWS credentials"
            exit 1
          fi
          echo "AWS credentials are properly configured."

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Install CDK dependencies
        run: |
          cd infra
          npm ci

      - name: Deploy CDK stack
        run: |
          cd infra
          npm run cdk -- deploy --require-approval never --outputs-file /tmp/cdk-outputs.json

      - name: Update frontend environment variables
        run: |
          # Get AWS account ID
          export AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          
          # Extract Cognito configuration from CDK outputs
          USER_POOL_ID=$(node -e "const fs=require('fs');const outputs=JSON.parse(fs.readFileSync('/tmp/cdk-outputs.json'));console.log(outputs.InfraStack.UserPoolId || '')")
          USER_POOL_CLIENT_ID=$(node -e "const fs=require('fs');const outputs=JSON.parse(fs.readFileSync('/tmp/cdk-outputs.json'));console.log(outputs.InfraStack.UserPoolClientId || '')")
          API_URL=$(node -e "const fs=require('fs');const outputs=JSON.parse(fs.readFileSync('/tmp/cdk-outputs.json'));console.log(outputs.InfraStack.ApiUrl || '')")
          
          # Update .env file
          echo "Updating frontend .env file with Cognito configuration"
          echo "REACT_APP_API_URL=$API_URL" > frontend/.env
          echo "REACT_APP_AWS_REGION=us-east-1" >> frontend/.env
          echo "REACT_APP_USER_POOL_ID=$USER_POOL_ID" >> frontend/.env
          echo "REACT_APP_USER_POOL_CLIENT_ID=$USER_POOL_CLIENT_ID" >> frontend/.env
          echo "REACT_APP_COGNITO_DOMAIN=nebulabridge-$AWS_ACCOUNT_ID" >> frontend/.env
          
          cat frontend/.env

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci

      - name: Run frontend tests
        run: |
          cd frontend
          CI=true npm test -- --watchAll=false

      - name: Build frontend
        run: |
          cd frontend
          npm run build

      - name: Install backend dependencies
        run: |
          cd backend
          pip install -r requirements.txt

      - name: Deploy frontend to S3
        run: |
          # Get the S3 bucket name from CDK outputs
          FRONTEND_BUCKET=$(node -e "const fs=require('fs');const outputs=JSON.parse(fs.readFileSync('/tmp/cdk-outputs.json'));console.log(outputs.InfraStack.FrontendUrl ? outputs.InfraStack.FrontendUrl.split('//')[1].split('.')[0] : '')")
          
          if [ -z "$FRONTEND_BUCKET" ]; then
            echo "Using hardcoded bucket name as fallback"
            aws s3 sync frontend/build/ s3://nebulabridge-frontend-1744743617 --delete
          else
            echo "Using bucket name from CDK outputs: $FRONTEND_BUCKET"
            aws s3 sync frontend/build/ s3://$FRONTEND_BUCKET --delete
          fi

      - name: Update Lambda function
        run: |
          # Get the Lambda function name from CDK outputs
          LAMBDA_FUNCTION=$(node -e "const fs=require('fs');const outputs=JSON.parse(fs.readFileSync('/tmp/cdk-outputs.json'));console.log(outputs.InfraStack.LambdaFunctionName || 'NebulaBridgeBackend')")
          
          aws lambda update-function-code \
            --function-name $LAMBDA_FUNCTION \
            --zip-file fileb://backend/lambda_function.zip

      - name: Create API Gateway deployment
        run: |
          # Get the API Gateway ID from CDK outputs
          API_ID=$(node -e "const fs=require('fs');const outputs=JSON.parse(fs.readFileSync('/tmp/cdk-outputs.json'));console.log(outputs.InfraStack.ApiUrl ? outputs.InfraStack.ApiUrl.split('.')[0].split('//')[1] : 'zeiuj2c69c')")
          
          aws apigateway create-deployment \
            --rest-api-id $API_ID \
            --stage-name prod
